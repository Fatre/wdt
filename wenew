#!/bin/bash
# Written by Mark Fritchen & Daniel Mabey

info() {
    cat << EOF
WDT - WhoisDig Tool 3.1 (2016 Oct 10, modified Feb 7 2018 9:00:00)
    Returns relevant fields from a whois and dig query for the domain.

Usage: wdt [arguments] [domain ..]          Run a Dig / Whois on the Domain(s)

Arguments:
   -h               Print this help screen. Overrides any other options
   -w               Print whois information for domain
   -W               Print www. of a domain
   -d               Print domain information
   -p               Print domain information from NameServer's around the world
   -@ [IP / NS]     Print domain information from specified name server
EOF
}

whoisInfo() {
    # Finds the whois server for the TLD .com / .org / .ca / etc...     Then runs a whois for the domain on that server.
    #whost=$(whois -h whois.iana.org $domain | egrep -e '^whois:' |   sed -e 's/[[:space:]][[:space:]]*/ /g' |   cut -d " " -f 2)
    #whos=$(whois -h $whost $domain)
    whos=$(whois $domain)
    echo -e "***  whois  ********************************************************************"
    LIST1=("WHOIS database:"
    "Registrar:"
    "Registrar Name:"
    "Registrar WHOIS"
    "Name Server:"
    "Provider Name"
    "Whois Server"
    "Updated Date"
    "Creation Date"
    "Expiration"
    "Domain Status"
    "Registrant Email"
    "Admin Street"
    "Admin City"
    "Admin State"
    "Admin Phone"
    "Admin Email")

    for ((i = 0; i < ${#LIST1[@]}; i++))
    do
        echo "$whos" | grep "${LIST1[$i]}"
    done
}

LIST2=(
    "A\t"
    "A "
    "MX\t"
    "MX "
    "CNAME\t"
    "CNAME "
    "NS\t"
    "NS "
    "SOA\t"
    "SOA "
    "TXT\t"
    "TXT ")
LIST4=(
    "A\t"
    "MX\t"
    "NS\t"
    "TXT\t"
    "SOA\t"
    "CNAME\t")

LIST3=(
    "a"
    "mx"
    "ns"
    "txt"
    "soa"
    "cname")

grepDig() {
    for ((i = 0; i < ${#LIST2[@]}; i++))
    do
        ekhoe=$(echo "$zoneRecord" | grep -P "HINFO")
        if [[ $ekhoe == *"HINFO"* ]] || [[ $dD == "true" ]] 
        then
            for ((p = 0; p < ${#LIST3[@]}; p++))
            do
                zoneRecord_1=$(dig ${LIST3[$p]} $dubdubdub$domain)
                echo "$zoneRecord_1" | grep -P "${LIST2[$i]}"
            done
        dD=""
        else
            echo "$zoneRecord" | grep -P "${LIST2[$i]}"
        fi
    done
}

newGrepDig() {
#  Checks to see if this is
    if [[ $ekhoe == *"HINFO"* ]] || [[ $dD == "true" ]];then
        for ((p = 0; p < ${#LIST3[@]}; p++));do
            zoneRecord_1=$(dig ${LIST3[$p]} $domain)
            echo "$zoneRecord_1" | grep -P "${LIST4[$p]}"
            #for ((i = 0; i < ${#LIST2[@]}; i++));do
                #echo "$zoneRecord_1" | grep -P "${LIST2[$i]}"
            #done
        done
    else
        for ((i = 0; i < ${#LIST2[@]}; i++));do
            echo "$zoneRecord" | grep -P "${LIST2[$i]}"
            #echo "hello"
        done
    fi
    dD=""

}

digDomain() {
    echo -e "***  non-www  ******************************************************************"
    dD="true"
    newGrepDig
}

digDubDomain() {
    echo -e "***  www  **********************************************************************"
    zoneRecord=$(dig @$ns "www."$domain any)
    dubdubdub="www."
    newGrepDig
}

digDomainOurNS() {
    echo -e "***  non-www our server  *******************************************************"
    zoneRecord=$(dig @$ns $domain any)
    newGrepDig
}

propagation() {
    echo -e "***  non-www  ******************************************************************"
    zoneRecord=$(dig @$ns $domain any)
    newGrepDig
    echo -e "***  non-www our server  *******************************************************"
    zoneRecord=$(dig $domain)
    at=""
    newGrepDig
    echo -e "***  non-www other name server  ************************************************"
    zoneRecord=$(dig @$ns1 +short $domain)
    echo -en $domain"\t\t\t\t"$zoneRecord;echo -e "\t\t$ns1"
    echo -e "***  non-www other name server  ************************************************"
    zoneRecord=$(dig @$ns2 +short $domain)
    echo -en $domain"\t\t\t\t"$zoneRecord;echo -e "\t\t$ns2"
}

ns="ns2.inmotionhosting.com";ns1="151.202.0.84";ns2="156.154.71.19";euns="91.103.112.150";euns2="164.132.130.171";sans="169.239.181.3";samns="200.49.159.68";cans="72.139.50.226";asns="202.14.93.153"


if [ $1 ]; then
    eval domain=\$$#
else
    info
    exit
fi

set -- "${@:1:$(($#-1))}"
nargs="$@"
options=""

while getopts ":dDwW@:hHpP" opt; do
    case $opt in
        d | D)
            digDomain; options=True;;
        w)
            whoisInfo; options=True;;
        W)
            digDubDomain; options=True;;
        h | H)
            info;;
        p | P)
            propagation; options=True;;
        @)
            echo "$(dig @${OPTARG} $domain)";;
        *)
            echo "$OPTARG is not defined in getopts." >&2;;
    esac
done

if [ -n "$options" ]; then
    echo -e "********************************************************************************"
    exit
else
    whoisInfo
    digDomain
    digDubDomain
fi
 
# Updates to come
# 
# @ function
# h trap
# Unix long options?
# change digDomain not on our ns and iterate the dig through all records as we cant dig any! change digDubDomain to include domain's A record
#
#
#
#
#
#
#
#
#
# Domain Record Iteration
# A    NS    MX    CNAME   SOA?    TXT?     DMK?
#
#
#
#
#
#
#
#
#
#
#
#
